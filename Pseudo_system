Logic for final e-logbook:
Dashboard.html -serves as gateway to: 1. check_system (data sensors)2. Signalk UI, 3. Logbook viewer, 4. Link to co-pilot, 5. Link to KIP.
Web server- app.py
Snapshot scripts ( snapshot_signalk.py)  to capture all Signalk data every minute, including those that are not currently connected and write to csv file. ? This needs to be split up: 1. Script to capture all the data and place in a static signalk_snapshot.JSON; 2. second script to read the JSON and display the deltas in the specific fields in the auto_log.csv file. Where there are no deltas, append these to the live data and state default data “not entered”. 

Manual_log.html: this is an input web page where the skipper chooses options related to real-world nav observations. This includes a free text observation input. Once submitted these rows and values are pasted into the Manual_log.csv file

Dualviewer.html- This displays all the time stamped rows of the auto_log and manual_logs headers are managed through app.route, conversion and formatting is managed through app.routes.
The viewer shows 2 views: 1. Grid/table- the rows and values as seen in auto_log.csv. This is displayed in pastel green to signify they are auto_logs. The manual_log are shown in a separate row- in red pastel, with the free text observation narrative as last row. All logs are chronologically displayed. 2. The card view. This shows all rows as card, Time stamped on top, rows in the main card. They are chronological and coloured immediately alerting what type of log they are. This view is the view which is exported and printed. 

Every hour the dualviewer.html is auto refreshed and updated with the latest auto_log in the auto log.cvs file
Whenever a person submits a manual_log, this is time stamped and the dualviewer shows the manual log-and the latest auto_log row once the form has been submitted. The auto_log continues to do hourly logs even if a manual log is submitted near the top of the hour or when the auto_log is nearly due. The logbook keeps filling the page with rows of logs.

Voyages: there is a button where a voyage can be started (voyage_id in the auto_log.csv). The system then tracks distance run between 2 separate Hourly auto_logs, ignoring auto_logs generated as part of a manual_log, this provides the Leg_NM ( arow in the auto_log.csv). Currently this runs in the dualviewer, but would be fine to be linked to another web_page e.g the 
Voyage.html. This webpage would include the following: 1. the ID of the voyage, 2.Voyage status: start-stop and status e.g active, stopped, undetermined, paused etc. 2.Milage: timestamps of auto_logs(hourly) with Leg_distance in Nm (distance run between 2 last hourly auto_logs) and Voyage_distance in Nm(Total of all Leg_distance within the Voyage_id). 3. there is a Total Milages_ by_year. This tracks the total milage of the yacht and important for servicing and maintenance. 4. (New) Passage_planning. This is a passage plan that is attached to a voyage id. It is a web form where the skipper enters particulars about the trip e.g. from X to Y, hazards, route; waypoints, ETA. The system tracks the positions against the waypoints to manage progress during a journey
